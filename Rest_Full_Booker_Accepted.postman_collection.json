{
	"info": {
		"_postman_id": "6816336d-5ae2-42a3-9e6a-0b035ce40923",
		"name": "1FINALPROJECT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25246763"
	},
	"item": [
		{
			"name": "Positive_Scenarios",
			"item": [
				{
					"name": "Create_Booking",
					"item": [
						{
							"name": "Create_Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
											"postman.setEnvironmentVariable(\"checkin\", jsonData.booking.bookingdates.checkin);\r",
											"postman.setEnvironmentVariable(\"checkout\", jsonData.booking.bookingdates.checkout);\r",
											"\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response body is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.bookingid)).to.eql('number');\r",
											"    pm.expect(typeof(response.booking)).to.eql('object');\r",
											"    pm.expect(typeof(response.booking.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Maksim\",\r\n    \"lastname\" : \"Tupitsyn\",\r\n    \"totalprice\" : 177,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2022-01-23\",\r\n        \"checkout\" : \"2023-01-23\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_created_Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if lastname is Tupitsyn\", function () {\r",
											"    pm.expect(response.lastname).to.eql(\"Tupitsyn\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is correct\", function () {\r",
											"    pm.response.to.have.body('{\"firstname\":\"Maksim\",\"lastname\":\"Tupitsyn\",\"totalprice\":177,\"depositpaid\":true,\"bookingdates\":{\"checkin\":\"2022-01-23\",\"checkout\":\"2023-01-23\"},\"additionalneeds\":\"Lunch\"}');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_Booking_Кириллица",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
											"postman.setEnvironmentVariable(\"checkin\", jsonData.booking.bookingdates.checkin);\r",
											"postman.setEnvironmentVariable(\"checkout\", jsonData.booking.bookingdates.checkout);\r",
											"\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response body is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.bookingid)).to.eql('number');\r",
											"    pm.expect(typeof(response.booking)).to.eql('object');\r",
											"    pm.expect(typeof(response.booking.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"firstname\" : \"Максим\",\r\n\"lastname\" : \"Тупицын\",\r\n\"totalprice\" : 177,\r\n\"depositpaid\" : true,\r\n\"bookingdates\" : {\r\n\"checkin\" : \"2022-01-23\",\r\n\"checkout\" : \"2023-01-23\"\r\n},\r\n\"additionalneeds\" : \"Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_created_Booking Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if lastname is Тупицын\", function () {\r",
											"    pm.expect(response.lastname).to.eql(\"Тупицын\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is correct\", function () {\r",
											"    pm.response.to.have.body('{\"firstname\":\"Максим\",\"lastname\":\"Тупицын\",\"totalprice\":177,\"depositpaid\":true,\"bookingdates\":{\"checkin\":\"2022-01-23\",\"checkout\":\"2023-01-23\"},\"additionalneeds\":\"Lunch\"}');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_Booking_japan_korean_alphabetics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
											"postman.setEnvironmentVariable(\"checkin\", jsonData.booking.bookingdates.checkin);\r",
											"postman.setEnvironmentVariable(\"checkout\", jsonData.booking.bookingdates.checkout);\r",
											"\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response body is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.bookingid)).to.eql('number');\r",
											"    pm.expect(typeof(response.booking)).to.eql('object');\r",
											"    pm.expect(typeof(response.booking.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"firstname\" : \"中國皮卡丘\",\r\n\"lastname\" : \"日本のピカチュウ\",\r\n\"totalprice\" : 177,\r\n\"depositpaid\" : true,\r\n\"bookingdates\" : {\r\n\"checkin\" : \"2022-01-23\",\r\n\"checkout\" : \"2023-01-23\"\r\n},\r\n\"additionalneeds\" : \"Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_created_Booking Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if lastname is Tupitsyn\", function () {\r",
											"    pm.expect(response.lastname).to.eql(\"日本のピカチュウ\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is correct\", function () {\r",
											"    pm.response.to.have.body('{\"firstname\":\"中國皮卡丘\",\"lastname\":\"日本のピカチュウ\",\"totalprice\":177,\"depositpaid\":true,\"bookingdates\":{\"checkin\":\"2022-01-23\",\"checkout\":\"2023-01-23\"},\"additionalneeds\":\"Lunch\"}');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Booking",
					"item": [
						{
							"name": "Get_All_Bookings_Ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response body is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"//Check json value = number\r",
											"pm.test(\"JSON value is a number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.forEach((booking) => pm.expect(typeof(booking.bookingid)).to.eql('number'));\r",
											" \r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Booking_by_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set Env.Variables\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"FirstName\", jsonData.firstname);\r",
											"postman.setEnvironmentVariable(\"LastName\", jsonData.lastname);\r",
											"postman.setEnvironmentVariable(\"TotalPrice\", jsonData.totalprice);\r",
											"postman.setEnvironmentVariable(\"DepositPaid\", jsonData.depositpaid);\r",
											"postman.setEnvironmentVariable(\"checkin\", jsonData.bookingdates.checkin);\r",
											"postman.setEnvironmentVariable(\"checkout\", jsonData.bookingdates.checkout);\r",
											"postman.setEnvironmentVariable(\"AdditionalNeeds\", jsonData.additionalneeds);\r",
											"\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Booking_by_Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response body is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"//Check json value = number\r",
											"pm.test(\"JSON value is a number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.forEach((booking) => pm.expect(typeof(booking.bookingid)).to.eql('number'));\r",
											" \r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking?firstname={{FirstName}}&lastname={{LastName}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "{{FirstName}}"
										},
										{
											"key": "lastname",
											"value": "{{LastName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Booking_by_Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response body is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"//Check json value = number\r",
											"pm.test(\"JSON value is a number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.forEach((booking) => pm.expect(typeof(booking.bookingid)).to.eql('number'));\r",
											" \r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking?checkin={{checkin}}&checkout={{checkout}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "{{checkin}}"
										},
										{
											"key": "checkout",
											"value": "{{checkout}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update_Booking",
					"item": [
						{
							"name": "Update_valid_Basic_Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set Env.Variables\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"FirstName\", jsonData.firstname);\r",
											"postman.setEnvironmentVariable(\"LastName\", jsonData.lastname);\r",
											"postman.setEnvironmentVariable(\"TotalPrice\", jsonData.totalprice);\r",
											"postman.setEnvironmentVariable(\"DepositPaid\", jsonData.depositpaid);\r",
											"postman.setEnvironmentVariable(\"checkin\", jsonData.bookingdates.checkin);\r",
											"postman.setEnvironmentVariable(\"checkout\", jsonData.bookingdates.checkout);\r",
											"postman.setEnvironmentVariable(\"AdditionalNeeds\", jsonData.additionalneeds);\r",
											"\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Armen\",\r\n    \"lastname\" : \"Volosatyi\",\r\n    \"totalprice\" : 333,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2022-01-10\",\r\n        \"checkout\" : \"2023-01-23\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Updated_Booking Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"//Valid Responce Body\r",
											"const jsonData = pm.response.json()\r",
											"let firstn = pm.environment.get(\"FirstName\")\r",
											"let lastn = pm.environment.get(\"LastName\")\r",
											"let totalp = pm.environment.get(\"TotalPrice\")\r",
											"let depositp = pm.environment.get(\"DepositPaid\")\r",
											"let checki = pm.environment.get(\"checkin\")\r",
											"let checko = pm.environment.get(\"checkout\")\r",
											"pm.test(\"Validation Responce Body\", () => {\r",
											"    pm.expect(jsonData.lastname).equal(lastn)\r",
											"    pm.expect(jsonData.firstname).equal(firstn)\r",
											"    //pm.expect(jsonData.totalprice).equal(totalp)\r",
											"    pm.expect(jsonData.depositpaid).equal(depositp)\r",
											"    pm.expect(jsonData.bookingdates.checkin).equal(checki)\r",
											"    pm.expect(jsonData.bookingdates.checkout).equal(checko)\r",
											"    \r",
											"})\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response Status\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//Set Env='token'\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
											"//Have a token in body\r",
											"pm.test(\"Response contains token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"token\");\r",
											"});\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"username\":\"admin\" ,\r\n\"password\":\"password123\"\r\n}"
								},
								"url": {
									"raw": "{{BaseUrl}}auth",
									"host": [
										"{{BaseUrl}}auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update_valid_cookie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set Env.Variables\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"FirstName\", jsonData.firstname);\r",
											"postman.setEnvironmentVariable(\"LastName\", jsonData.lastname);\r",
											"postman.setEnvironmentVariable(\"TotalPrice\", jsonData.totalprice);\r",
											"postman.setEnvironmentVariable(\"DepositPaid\", jsonData.depositpaid);\r",
											"postman.setEnvironmentVariable(\"checkin\", jsonData.bookingdates.checkin);\r",
											"postman.setEnvironmentVariable(\"checkout\", jsonData.bookingdates.checkout);\r",
											"postman.setEnvironmentVariable(\"AdditionalNeeds\", jsonData.additionalneeds);\r",
											"\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if lastname is Yakuza\", function () {\r",
											"    pm.expect(response.lastname).to.eql(\"Yakuza\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is correct\", function () {\r",
											"    pm.response.to.have.body('{\"firstname\":\"Valera\",\"lastname\":\"Yakuza\",\"totalprice\":222,\"depositpaid\":false,\"bookingdates\":{\"checkin\":\"2023-01-01\",\"checkout\":\"2023-01-23\"},\"additionalneeds\":\"Lunch\"}');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Valera\",\r\n    \"lastname\" : \"Yakuza\",\r\n    \"totalprice\" : 222,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2023-01-01\",\r\n        \"checkout\" : \"2023-01-23\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Updated_Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"//Valid Responce Body\r",
											"const jsonData = pm.response.json()\r",
											"let firstn = pm.environment.get(\"FirstName\")\r",
											"let lastn = pm.environment.get(\"LastName\")\r",
											"let totalp = pm.environment.get(\"TotalPrice\")\r",
											"let depositp = pm.environment.get(\"DepositPaid\")\r",
											"let checki = pm.environment.get(\"checkin\")\r",
											"let checko = pm.environment.get(\"checkout\")\r",
											"pm.test(\"Validation Responce Body\", () => {\r",
											"    pm.expect(jsonData.lastname).equal(lastn)\r",
											"    pm.expect(jsonData.firstname).equal(firstn)\r",
											"    //pm.expect(jsonData.totalprice).equal(totalp)\r",
											"    pm.expect(jsonData.depositpaid).equal(depositp)\r",
											"    pm.expect(jsonData.bookingdates.checkin).equal(checki)\r",
											"    pm.expect(jsonData.bookingdates.checkout).equal(checko)\r",
											"    \r",
											"})\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partitial_Update_Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set Env.Variables\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"FirstName\", jsonData.firstname);\r",
											"postman.setEnvironmentVariable(\"LastName\", jsonData.lastname);\r",
											"postman.setEnvironmentVariable(\"TotalPrice\", jsonData.totalprice);\r",
											"postman.setEnvironmentVariable(\"DepositPaid\", jsonData.depositpaid);\r",
											"postman.setEnvironmentVariable(\"checkin\", jsonData.bookingdates.checkin);\r",
											"postman.setEnvironmentVariable(\"checkout\", jsonData.bookingdates.checkout);\r",
											"postman.setEnvironmentVariable(\"AdditionalNeeds\", jsonData.additionalneeds);\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Check if lastname is Tupitsyn\", function () {\r",
											"    pm.expect(response.lastname).to.eql(\"Tupitsyn\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body is correct\", function () {\r",
											"    pm.response.to.have.body('{\"firstname\":\"Maksim\",\"lastname\":\"Tupitsyn\",\"totalprice\":222,\"depositpaid\":false,\"bookingdates\":{\"checkin\":\"2023-01-01\",\"checkout\":\"2023-01-23\"},\"additionalneeds\":\"Breakfast in bed\"}');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Maksim\",\r\n    \"lastname\" : \"Tupitsyn\",\r\n    \"additionalneeds\": \"Breakfast in bed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Updated_Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"//Valid Responce Body\r",
											"const jsonData = pm.response.json()\r",
											"let firstn = pm.environment.get(\"FirstName\")\r",
											"let lastn = pm.environment.get(\"LastName\")\r",
											"let totalp = pm.environment.get(\"TotalPrice\")\r",
											"let depositp = pm.environment.get(\"DepositPaid\")\r",
											"let checki = pm.environment.get(\"checkin\")\r",
											"let checko = pm.environment.get(\"checkout\")\r",
											"pm.test(\"Validation Responce Body\", () => {\r",
											"    pm.expect(jsonData.lastname).equal(lastn)\r",
											"    pm.expect(jsonData.firstname).equal(firstn)\r",
											"    //pm.expect(jsonData.totalprice).equal(totalp)\r",
											"    pm.expect(jsonData.depositpaid).equal(depositp)\r",
											"    pm.expect(jsonData.bookingdates.checkin).equal(checki)\r",
											"    pm.expect(jsonData.bookingdates.checkout).equal(checko)\r",
											"    \r",
											"})\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Booking",
					"item": [
						{
							"name": "Delete_Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 201', function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Body message is `Created`\", function () {\r",
											"    pm.response.to.have.body('Created');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "password123",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm_delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 404', function() {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.notFound;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Negative_Scenarios_Valid_Data",
			"item": [
				{
					"name": "Create_booking",
					"item": [
						{
							"name": "Create_Booking_URLupRegistr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);\r",
											"\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response body is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.bookingid)).to.eql('number');\r",
											"    pm.expect(typeof(response.booking)).to.eql('object');\r",
											"    pm.expect(typeof(response.booking.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"additionalneeds\" : \"Lunch\",\r\n    \"lastname\" : \"TUPitSyN\",\r\n    \"firstname\" : \"Максим\",\r\n    \"totalprice\" : 177,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkout\" : \"2023-01-23\",\r\n        \"checkin\" : \"2022-01-23\" }\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}BOOKING",
									"host": [
										"{{BaseUrl}}BOOKING"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_created_Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Set Env.Variables\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"FirstName\", jsonData.firstname);\r",
											"postman.setEnvironmentVariable(\"LastName\", jsonData.lastname);\r",
											"postman.setEnvironmentVariable(\"TotalPrice\", jsonData.totalprice);\r",
											"postman.setEnvironmentVariable(\"DepositPaid\", jsonData.depositpaid);\r",
											"postman.setEnvironmentVariable(\"checkin\", jsonData.bookingdates.checkin);\r",
											"postman.setEnvironmentVariable(\"checkout\", jsonData.bookingdates.checkout);\r",
											"postman.setEnvironmentVariable(\"AdditionalNeeds\", jsonData.additionalneeds);\r",
											"//Response status\r",
											"pm.test('Status code is 200', function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Response is a JSON\", function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"pm.test(\"Response schema is correct\", function() {\r",
											"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;\r",
											"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;\r",
											"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"JSON values are correct types\", function () {\r",
											"    pm.expect(typeof(response.firstname)).to.eql('string');\r",
											"    pm.expect(typeof(response.lastname)).to.eql('string');\r",
											"    pm.expect(typeof(response.totalprice)).to.eql('number');\r",
											"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');\r",
											"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');\r",
											"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');\r",
											"    pm.expect(typeof(response.additionalneeds)).to.eql('string');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_booking",
					"item": [
						{
							"name": "Get_booking_doesn't_exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 404', function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.be.notFound;",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Not Found`\", function () {",
											"    pm.response.to.have.body('Not Found');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/100000",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"100000"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update_booking",
					"item": [
						{
							"name": "Update_booking_doesn't_exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 405', function() {",
											"    pm.response.to.have.status(405);",
											"    });",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Method Not Allowed`\", function () {",
											"    pm.response.to.have.body('Method Not Allowed');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Armen\",\r\n    \"lastname\" : \"Volosatyi\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2022-01-10\",\r\n        \"checkout\" : \"2023-01-23\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}"
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/10000000",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"10000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Partitial_Update_Booking_doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 405', function() {\r",
											"    pm.response.to.have.status(405);\r",
											"    });\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Body message is `Method Not Allowed`\", function () {\r",
											"    pm.response.to.have.body('Method Not Allowed');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Максим\",\r\n    \"lastname\" : \"111111111\",\r\n    \"additionalneeds\": \"Breakfast in bed\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking/1000000",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"1000000"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_booking",
					"item": [
						{
							"name": "Delete_booking_doesnt_exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 405', function() {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Body message is `Method Not Allowed`\", function () {\r",
											"    pm.response.to.have.body('Method Not Allowed');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BaseUrl}}booking/100000",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"100000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_booking_no_permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status\r",
											"pm.test('Status code is 403', function() {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"//Response headers\r",
											"pm.test(\"Header Server is Cowboy\", function () {\r",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");\r",
											"});\r",
											"\r",
											"pm.test(\"Header Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");\r",
											"});\r",
											"\r",
											"//Response body\r",
											"pm.test(\"Body message is `Forbidden`\", function () {\r",
											"    pm.response.to.have.body('Forbidden');\r",
											"});\r",
											"\r",
											"//Performance\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Negative_Scenarios_Invalid_Data",
			"item": [
				{
					"name": "Create_Booking",
					"item": [
						{
							"name": "Create_Booking_Invalid_values",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should not be 200\", function () {",
											"    pm.response.to.not.have.status(200);",
											"});",
											"",
											"pm.test(`First name should not be null`, function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.booking.firstname).to.not.eql(\"null\");",
											"});",
											"",
											"pm.test(`Last name should not be null`, function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.booking.lastname).to.not.eql(\"null\");",
											"});",
											"",
											"pm.test(`Price should not be negative`, function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.booking.totalprice).to.be.above(0);",
											"});",
											"",
											"pm.test(`Deposit paid should exist`, function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.booking.depositpaid).to.exist;",
											"});",
											"",
											"pm.test(`Checkout date should be bigger than checkin date`, function (){",
											"    let jsonData = pm.response.json();",
											"    let checkout = new Date(jsonData.booking.bookingdates.checkout);",
											"    let checkin = new Date(jsonData.booking.bookingdates.checkin);",
											"    pm.expect(checkout).to.be.above(checkin);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"FirstName\", null);",
											"pm.environment.set(\"LastName\", null);",
											"pm.environment.set(\"TotalPrice\",-111);",
											"pm.environment.set(\"DepositPaid\", true);",
											"",
											"const moment = require(\"moment\");",
											"let checkin = moment().add(\"days\",_.random(15,180));",
											"pm.environment.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));",
											"",
											"let checkout = moment().add(\"days\",_.random(1,14));",
											"pm.environment.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));",
											"",
											"pm.environment.set(\"AdditionalNeeds\", null);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"{{FirstName}}\",\n    \"lastname\" : \"{{LastName}}\",\n    \"totalprice\" : {{TotalPrice}},\n    \"depositpaid\" : {{DepositPaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{AdditionalNeeds}}\"\n}"
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_booking_with_empty_parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 400', function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Bad Request`\", function () {",
											"    pm.response.to.have.body('Bad Request');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"FirstName\", \"Valera\");\r",
											"pm.environment.set(\"LastName\",\"\");\r",
											"pm.environment.set(\"TotalPrice\",\"\");\r",
											"pm.environment.set(\"DepositPaid\", true);\r",
											"\r",
											"const moment = require(\"moment\");\r",
											"let checkin = moment().add(\"days\",_.random(1,180));\r",
											"pm.environment.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));\r",
											"\r",
											"let checkout = moment().add(\"days\",_.random(180,360));\r",
											"pm.environment.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"AdditionalNeeds\", \"Breakfast\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"{{FirstName}}\",\n    \"lastname\" : \"{{LastName}}\",\n    \"totalprice\" : {{TotalPrice}},\n    \"depositpaid\" : {{DepositPaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{AdditionalNeeds}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_booking_invalid_firstname_prereq",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`First name should not be null`, function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.booking.firstname).to.not.eql(\"null\");",
											"});",
											"",
											"pm.test(`Last name should not be null`, function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.booking.lastname).to.not.eql(\"null\");",
											"});",
											"",
											"pm.test(`Price should not be negative`, function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.booking.totalprice).to.be.above(0);",
											"});",
											"",
											"pm.test(`Deposit paid should exist`, function () {",
											"    let jsonData = pm.response.json();",
											"    pm.expect(jsonData.booking.depositpaid).to.exist;",
											"});",
											"",
											"pm.test(`Checkout date should be bigger than checkin date`, function (){",
											"    let jsonData = pm.response.json();",
											"    let checkout = new Date(jsonData.booking.bookingdates.checkout);",
											"    let checkin = new Date(jsonData.booking.bookingdates.checkin);",
											"    pm.expect(checkout).to.be.above(checkin);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"FirstName\", 12300000000000000000000000000);\r",
											"pm.environment.set(\"LastName\",\"000000000000000000000000000000000000000000000000000000000\");\r",
											"pm.environment.set(\"TotalPrice\",222);\r",
											"pm.environment.set(\"DepositPaid\", true);\r",
											"\r",
											"const moment = require(\"moment\");\r",
											"let checkin = moment().add(\"days\",_.random(1,180));\r",
											"pm.environment.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));\r",
											"\r",
											"let checkout = moment().add(\"days\",_.random(180,360));\r",
											"pm.environment.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"AdditionalNeeds\", \"Breakfast\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"{{FirstName}}\",\n    \"lastname\" : \"{{LastName}}\",\n    \"totalprice\" : {{TotalPrice}},\n    \"depositpaid\" : {{DepositPaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{AdditionalNeeds}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_booking_wrong_firstname_hardcoded",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 500', function() {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Internal Server Error`\", function () {",
											"    pm.response.to.have.body('Internal Server Error');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : 12300000000000000000000000000,\n    \"lastname\" : \"Yakuza\",\n    \"totalprice\" : 222,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-06\",\n        \"checkout\" : \"2018-01-10\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_booking_wrong_totalprice_is null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 500', function() {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Internal Server Error`\", function () {",
											"    pm.response.to.have.body('Internal Server Error');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"FirstName\", \"Maksim\");\r",
											"pm.environment.set(\"LastName\",\"Tupitsyn\");\r",
											"pm.environment.set(\"TotalPrice\",null);\r",
											"pm.environment.set(\"DepositPaid\", true);\r",
											"\r",
											"const moment = require(\"moment\");\r",
											"let checkin = moment().add(\"days\",_.random(1,180));\r",
											"pm.environment.set(\"checkin\", checkin.format(\"YYYY-MM-DD\"));\r",
											"\r",
											"let checkout = moment().add(\"days\",_.random(180,360));\r",
											"pm.environment.set(\"checkout\", checkout.format(\"YYYY-MM-DD\"));\r",
											"\r",
											"pm.environment.set(\"AdditionalNeeds\", \"Breakfast\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"{{FirstName}}\",\n    \"lastname\" : \"{{LastName}}\",\n    \"totalprice\" : {{TotalPrice}},\n    \"depositpaid\" : {{DepositPaid}},\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkin}}\",\n        \"checkout\" : \"{{checkout}}\"\n    },\n    \"additionalneeds\" : \"{{AdditionalNeeds}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_booking_wrong_totalprice_is string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);",
											"",
											"//Response status",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Response is a JSON\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"var response = JSON.parse(responseBody);",
											"pm.test(\"Response schema is correct\", function() {",
											"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;",
											"});",
											"",
											"pm.test(\"JSON values are correct types\", function () {",
											"    pm.expect(typeof(response.bookingid)).to.eql('number');",
											"    pm.expect(typeof(response.booking)).to.eql('object');",
											"    pm.expect(typeof(response.booking.firstname)).to.eql('string');",
											"    pm.expect(typeof(response.booking.lastname)).to.eql('string');",
											"    pm.expect(response.booking.totalprice).to.be.null;",
											"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');",
											"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');",
											"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');",
											"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Maksim\",\n    \"lastname\" : \"Tupitsyn\",\n    \"totalprice\" : \"billion dollars\",\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-06\",\n        \"checkout\" : \"2018-01-10\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_booking_wrong_depositpaid_is string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);",
											"",
											"//Response status",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Response is a JSON\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"var response = JSON.parse(responseBody);",
											"pm.test(\"Response schema is correct\", function() {",
											"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;",
											"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;",
											"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;",
											"});",
											"",
											"pm.test(\"JSON values are correct types\", function () {",
											"    pm.expect(typeof(response.bookingid)).to.eql('number');",
											"    pm.expect(typeof(response.booking)).to.eql('object');",
											"    pm.expect(typeof(response.booking.firstname)).to.eql('string');",
											"    pm.expect(typeof(response.booking.lastname)).to.eql('string');",
											"    pm.expect(typeof(response.booking.totalprice)).to.eql('number');",
											"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');",
											"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');",
											"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');",
											"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');",
											"});",
											"pm.test(\"Check if depositpaid is true\", function () {",
											"    pm.expect(response.booking.depositpaid).to.be.true;",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Maksim\",\n    \"lastname\" : \"Tupitsyn\",\n    \"totalprice\" : 777,\n    \"depositpaid\" : \"yes 1000$\",\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-06\",\n        \"checkout\" : \"2018-01-10\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_booking_wrong_bookingdates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Invalid date`\", function () {",
											"    pm.response.to.have.body('Invalid date');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Maksim\",\n    \"lastname\" : \"Tupitsyn\",\n    \"totalprice\" : 243,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"24.12.2016\",\n        \"checkout\" : \"26.12.2016\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_booking_with_invalid_model",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 500', function() {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Internal Server Error`\", function () {",
											"    pm.response.to.have.body('Internal Server Error');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pets\" : true,\n    \"petsname\" : \"Sharik\",\n    \"petadditionalneeds\" : \"Dogs food\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_empty_booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 500', function() {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Internal Server Error`\", function () {",
											"    pm.response.to.have.body('Internal Server Error');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseUrl}}booking",
									"host": [
										"{{BaseUrl}}booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_booking",
					"item": []
				},
				{
					"name": "Update_Booking",
					"item": [
						{
							"name": "update booking with invalid authorisation token Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response status",
											"pm.test('Status code is 403', function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"//Response headers",
											"pm.test(\"Header Server is Cowboy\", function () {",
											"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
											"});",
											"",
											"pm.test(\"Header Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
											"});",
											"",
											"//Response body",
											"pm.test(\"Body message is `Forbidden`\", function () {",
											"    pm.response.to.have.body('Forbidden');",
											"});",
											"",
											"//Performance",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token=d225ffd317e7464",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Valera\",\n    \"lastname\" : \"Yakuzza\",\n    \"totalprice\" : 666,\n    \"depositpaid\" : false,\n    \"bookingdates\" : {\n        \"checkin\" : \"2023-01-01\",\n        \"checkout\" : \"2024-01-22\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}booking/{{bookingId}}",
									"host": [
										"{{BaseUrl}}booking"
									],
									"path": [
										"{{bookingId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Create_Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Set Env='token'\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
							"//Have a token in body\r",
							"pm.test(\"Response contains token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});\r",
							"//Performance\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"var response = JSON.parse(responseBody);\r",
							"pm.test(\"JSON values are correct types\", function () {\r",
							"    pm.expect(typeof(response.token)).to.eql('string');\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"username\":\"admin\" ,\r\n\"password\":\"password123\"\r\n}"
				},
				"url": {
					"raw": "{{BaseUrl}}auth",
					"host": [
						"{{BaseUrl}}auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "!Health_Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Response Status\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"//Response body\r",
							"pm.test(\"Body message is `Created`\", function () {\r",
							"    pm.response.to.have.body('Created');\r",
							"});\r",
							"//Performance\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BaseUrl}}ping",
					"host": [
						"{{BaseUrl}}ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}